AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:

    - Label:
        default: 'Parametros da LaunchConfiguration'
      Parameters:
      - InstanceType
      - ImageID

    - Label:
        default: 'Parametros da ASG Cluster'
      Parameters:
      - ClusterName
      - Environment
      - MinSizeInstance
      - MaxSizeInstance
      - DesiredCapacityASG
      - HealthCheckTypeASG
      - Subnets
      - CooldownASG
      - CapacityOnDemandPercent
      - ASGSpotAllocationStrategy

Parameters:

  VPCid:
    Description: Security Group VPC ID
    Type: AWS::EC2::VPC::Id

  ClusterName:
    Description: Cluster Name
    Type: String
  
  Environment:
    Description: Cluster Environment
    Type: String
    AllowedValues:
      - "DEV"
      - "QA"
      - "PROD"
 
  MinSizeInstance:
    Description: Number of Minimal Instances
    Type: Number
    Default: 2

  MaxSizeInstance:
    Description: Number of Maximum Instances
    Type: Number
    Default: 2
  
  DesiredCapacityASG:
    Description: Number of Desired Instances
    Type: Number
    Default: 2
  
  HealthCheckTypeASG:
    Description: ASG HealthCheck Type.
    Type: String
    Default: EC2
  
  Subnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  
  InstanceType:
    Description: Instance Type
    Type: String
    Default: t3.small
  
  OverrideInstance1:
    Description: Override Instance Type
    Type: String
    Default: t3a.small
  
  OverrideInstance2:
    Description: Override Instance Type
    Type: String
    Default: t3a.medium

  OverrideInstance3:
    Description: Override Instance Type
    Type: String
    Default: t3a.large

  OverrideInstance4:
    Description: Override Instance Type
    Type: String
    Default: t2.small

  OverrideInstance5:
    Description: Override Instance Type
    Type: String
    Default: t2.medium
   
  ImageID:
    Description: Image ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  CooldownASG:
    Description: Instance cooldown
    Type: String
    Default: 60
  
  CapacityOnDemandPercent:
    Description: Capacity that will run on OnDemand
    Type: Number
    Default: 20
  
  ASGSpotAllocationStrategy:
    Description: Spot Instance allocation strategy
    Type: String
    Default: lowest-price
    AllowedValues:
      - lowest-price
      - capacity-optimized
  
  StopContainerTimeoutInSeconds:
    Description: Time in seconds that the ECS Agent waits before removing a stoped container
    Type: Number
    Default: 30
  
  VolumeType:
    Description: Type of volume used in instances
    Type: String
    Default: gp3

  DrainingTimeoutInSeconds:
    Description: Maximum time in seconds an EC2 instance waits when terminating until all containers are moved to another EC2 instance (draining).
    Type: Number
    Default: 600 # 10 minutes
  
  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain log events in the specified log group.
    Type: Number
    Default: 14
  
  GroupName:
    Description: Event Group for Cluster Capacity Rule
    Type: String
    Default: ClusterCapacityRule

Resources:

########################  ROLES  ########################

    EC2Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: 
              - ec2.amazonaws.com
            Action: 
            - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 
               - ecs:CreateCluster
               - ecs:DeregisterContainerInstance
               - ecs:DiscoverPollEndpoint
               - ecs:Poll
               - ecs:RegisterContainerInstance
               - ecs:StartTelemetrySession
               - ecs:Submit*
              Resource: '*'
        - PolicyName: ecr-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 
                - ecr:*
              Resource: '*'
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              Resource: '*'

    EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles:
          - !Ref 'EC2Role'
    
    AutoScalingGroupLifecycleHookIAMRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: 'autoscaling.amazonaws.com'
            Action: 'sts:AssumeRole'
        Policies:
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: write
              Effect: Allow
              Action:
              - 'sqs:SendMessage'
              - 'sqs:GetQueueUrl'
              Resource: !GetAtt 'AutoScalingGroupLifecycleHookQueue.Arn'

    DrainInstanceLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Policies:
        - PolicyName: draininstance
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - 'sqs:DeleteMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:SendMessage'
              - 'sqs:GetQueueAttributes'
              Resource: !GetAtt AutoScalingGroupLifecycleHookQueue.Arn
            - Effect: Allow
              Action:
              - 'ecs:ListContainerInstances'
              Resource: !GetAtt ECSCluster.Arn
            - Effect: Allow
              Action:
              - 'ecs:updateContainerInstancesState'
              - 'ecs:listTasks'
              Resource: '*'
              Condition:
                StringEquals:
                  'ecs:cluster': !GetAtt ECSCluster.Arn
            - Effect: Allow
              Action:
              - 'autoscaling:CompleteLifecycleAction'
              - 'autoscaling:RecordLifecycleActionHeartbeat'
              Resource: !Sub 'arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ECSAutoScalingGroup}'
              
    DrainInstanceLambdaPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        Roles:
        - !Ref DrainInstanceLambdaRole
        PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'DrainInstanceLogGroup.Arn'
    
    ScaleUpLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
        Policies:
        - PolicyName: autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: 'autoscaling:ExecutePolicy'
              Resource: '*'
    
    ScaleUpLambdaPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        Roles:
        - !Ref ScaleUpLambdaRole
        PolicyName: lambda
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'ScaleUpLogGroup.Arn'

######################## CLOUDWATCH LOG GROUPS ########################

    MessagesLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '${ClusterName}-/var/log/messages'
        RetentionInDays: !Ref LogsRetentionInDays
    
    DmesgLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '${ClusterName}-/var/log/dmesg'
        RetentionInDays: !Ref LogsRetentionInDays

    DockerLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '${ClusterName}-/var/log/docker'
        RetentionInDays: !Ref LogsRetentionInDays
    
    EcsInitLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '${ClusterName}-/var/log/ecs/ecs-init.log'
        RetentionInDays: !Ref LogsRetentionInDays
    
    EcsAgentLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '${ClusterName}-/var/log/ecs/ecs-agent.log'
        RetentionInDays: !Ref LogsRetentionInDays
    
    EcsAuditLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '${ClusterName}-/var/log/ecs/audit.log'
        RetentionInDays: !Ref LogsRetentionInDays

    DrainInstanceLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '/aws/lambda/${DrainInstanceLambda}'
        RetentionInDays: !Ref LogsRetentionInDays
    
    EventLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub "/aws/events/${GroupName}"
        RetentionInDays: !Ref LogsRetentionInDays
    
    ScaleUpLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '/aws/lambda/${ScaleUpLambda}'
        RetentionInDays: !Ref LogsRetentionInDays

########################  CLUSTER  ########################


  ######################## ECS Instances Security Group ########################
    SecurityGroupECS:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Security Group for ECS Instances"
        VpcId: !Ref VPCid

#  IngressSecurityGroupES: # Here we can add rules to SG
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref SecurityGroupECS
#      SourceSecurityGroupId: sg-xxxxxxx
#      IpProtocol: "-1"


  ######################## ECS Cluster ######################## 
    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: !Ref ClusterName
            Tags:
              - Key: "Environment"
                Value: !Ref Environment

  ######################## ECS Cluster Instance  ########################
    ECSClusterInstance:
        Type: "AWS::EC2::LaunchTemplate"
        Metadata:
          AWS::CloudFormation::Init:
            config:
              commands:
                01_add_instance_to_cluster:
                  command: !Sub echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
                02_enable_cloudwatch_agent:
                  command: !Sub /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ECSCloudWatchParameter} -s
                03_add_stop_container_timeout:
                  command: !Sub echo ECS_CONTAINER_STOP_TIMEOUT=${StopContainerTimeoutInSeconds}s >> /etc/ecs/ecs.config
              files:
                /etc/cfn/cfn-hup.conf:
                  mode: 000400
                  owner: root
                  group: root
                  content: !Sub |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.ECSClusterInstance.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSClusterInstance
              services:
                sysvinit:
                  cfn-hup:
                    enabled: true
                    ensureRunning: true
                    files:
                      - /etc/cfn/cfn-hup.conf
                      - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Properties:
            LaunchTemplateData:
              ImageId: !Ref ImageID
              IamInstanceProfile: 
                Arn: !GetAtt EC2InstanceProfile.Arn
              SecurityGroupIds: 
                - !Ref SecurityGroupECS
              InstanceType: !Ref InstanceType
              TagSpecifications:
                - ResourceType: instance
                  Tags:
                    - Key: Environment
                      Value: !Ref Environment
                    - Key: "ClusterECS"
                      Value: !Ref ClusterName
                - ResourceType: volume
                  Tags:
                    - Key: Environment
                      Value: !Ref Environment
                    - Key: "ClusterECS"
                      Value: !Ref ClusterName
              BlockDeviceMappings: 
                - DeviceName: "/dev/xvda"
                  Ebs: 
                      VolumeSize: 30
                      VolumeType: !Ref VolumeType                  
              UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    yum update -y
                    yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                    yum install -y collectd
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
                    yum install -y aws-cfn-bootstrap hibagent 
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSClusterInstance
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup

  ######################## ECS Cluster - AutoScalingGroup ########################
    ECSAutoScalingGroup:
        DependsOn: ECSCluster
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
          MinSize: !Ref MinSizeInstance
          MaxSize: !Ref MaxSizeInstance
          MixedInstancesPolicy:
            InstancesDistribution:
              OnDemandPercentageAboveBaseCapacity: !Ref CapacityOnDemandPercent
              SpotAllocationStrategy: !Ref ASGSpotAllocationStrategy
            LaunchTemplate:
              LaunchTemplateSpecification:
                Version: !GetAtt ECSClusterInstance.LatestVersionNumber
                LaunchTemplateId: !Ref ECSClusterInstance
              Overrides:
                - InstanceType: !Ref OverrideInstance1
                - InstanceType: !Ref OverrideInstance2
                - InstanceType: !Ref OverrideInstance3
                - InstanceType: !Ref OverrideInstance4
                - InstanceType: !Ref OverrideInstance5
          DesiredCapacity: !Ref DesiredCapacityASG
          Cooldown: !Ref CooldownASG
          HealthCheckType: !Ref HealthCheckTypeASG
          HealthCheckGracePeriod: 0
          VPCZoneIdentifier: !Ref Subnets
          MetricsCollection:
          - Granularity: '1Minute'
            Metrics:
            - 'GroupDesiredCapacity'
          TerminationPolicies: 
            - "Default"
          Tags:
            - Key: ClusterECS
              Value: !Ref ClusterName
              PropagateAtLaunch: false
            - Key: Environment
              Value: !Ref Environment
              PropagateAtLaunch: false
        CreationPolicy:
          ResourceSignal:
            Timeout: PT15M
        UpdatePolicy:
          AutoScalingRollingUpdate:
            MinInstancesInService: 1
            MaxBatchSize: 1
            PauseTime: PT15M
            SuspendProcesses:
              - HealthCheck
              - ReplaceUnhealthy
              - AZRebalance
              - AlarmNotification
              - ScheduledActions
            WaitOnResourceSignals: true
    
    ######################## ECS Cluster - AutoScalingGroup - Policies ########################
    AutoScalingGroupTerminatingLifecycleHook:
      Type: 'AWS::AutoScaling::LifecycleHook'
      Properties:
        HeartbeatTimeout: 600
        DefaultResult: CONTINUE
        AutoScalingGroupName: !Ref ECSAutoScalingGroup
        LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
        NotificationTargetARN: !GetAtt 'AutoScalingGroupLifecycleHookQueue.Arn'
        RoleARN: !GetAtt 'AutoScalingGroupLifecycleHookIAMRole.Arn'
    
    ScaleUpPolicy:
      Type: 'AWS::AutoScaling::ScalingPolicy'
      Properties:
        AutoScalingGroupName: !Ref ECSAutoScalingGroup
        PolicyType: StepScaling
        AdjustmentType: ChangeInCapacity
        EstimatedInstanceWarmup: 300
        StepAdjustments:
        - MetricIntervalUpperBound: 0.0
          ScalingAdjustment: 1
    
    ScaleDownPolicy:
      Type: 'AWS::AutoScaling::ScalingPolicy'
      Properties:
        AutoScalingGroupName: !Ref ECSAutoScalingGroup
        PolicyType: StepScaling
        AdjustmentType: ChangeInCapacity
        EstimatedInstanceWarmup: 10
        StepAdjustments:
        - MetricIntervalLowerBound: 0.0
          ScalingAdjustment: -1

########################  MONITORING - ALARMS  ########################

    CPUReservationTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Average CPU reservation over last 10 minutes higher than 90%'
        Namespace: 'AWS/ECS'
        Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        MetricName: CPUReservation
        ComparisonOperator: GreaterThanThreshold
        Statistic: Average
        Period: 300
        EvaluationPeriods: 3
        Threshold: 90

    CPUUtilizationTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
        Namespace: 'AWS/ECS'
        Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        MetricName: CPUUtilization
        ComparisonOperator: GreaterThanThreshold
        Statistic: Average
        Period: 600
        EvaluationPeriods: 1
        Threshold: 80

    MemoryReservationTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Maximum memory reservation over last 1 minutes higher than 70%'
        Namespace: 'AWS/ECS'
        AlarmActions:
          - !Ref ScaleUpPolicy
        Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        MetricName: MemoryReservation
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Statistic: Maximum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 70
    
    MemoryReservationTooLowAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Maximum memory reservation over last 5 minutes is lower than 40%'
        Namespace: 'AWS/ECS'
        Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        MetricName: MemoryReservation
        ComparisonOperator: LessThanOrEqualToThreshold
        Statistic: Maximum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 40

    MemoryUtilizationTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Average memory utilization over last 10 minutes higher than 80%'
        Namespace: 'AWS/ECS'
        Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        MetricName: MemoryUtilization
        ComparisonOperator: GreaterThanThreshold
        Statistic: Average
        Period: 600
        EvaluationPeriods: 1
        Threshold: 80
    
    AutoScalingGroupLifecycleHookQueueTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Queue contains messages older than 10 minutes, messages are not consumed'
        Namespace: 'AWS/SQS'
        MetricName: ApproximateAgeOfOldestMessage
        Statistic: Maximum
        Period: 60
        EvaluationPeriods: 1
        ComparisonOperator: GreaterThanThreshold
        Threshold: 600
        Dimensions:
        - Name: QueueName
          Value: !GetAtt 'AutoScalingGroupLifecycleHookQueue.QueueName'
        TreatMissingData: notBreaching
    
    AutoScalingGroupLifecycleHookDeadLetterQueueTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Dead letter queue contains messages, message processing failed'
        Namespace: 'AWS/SQS'
        MetricName: ApproximateNumberOfMessagesVisible
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        ComparisonOperator: GreaterThanThreshold
        Threshold: 0
        Dimensions:
        - Name: QueueName
          Value: !GetAtt 'AutoScalingGroupLifecycleHookDeadLetterQueue.QueueName'
        TreatMissingData: notBreaching
    
    ScaleUpLambdaErrorsTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Invocations failed due to errors in the function'
        Namespace: 'AWS/Lambda'
        MetricName: Errors
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        ComparisonOperator: GreaterThanThreshold
        Threshold: 0
        Dimensions:
        - Name: FunctionName
          Value: !Ref ScaleUpLambda
        TreatMissingData: notBreaching
    
    ScaleUpLambdaThrottlesTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Invocation attempts that were throttled due to invocation rates exceeding the concurrent limits'
        Namespace: 'AWS/Lambda'
        MetricName: Throttles
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        ComparisonOperator: GreaterThanThreshold
        Threshold: 0
        Dimensions:
        - Name: FunctionName
          Value: !Ref ScaleUpLambda
        TreatMissingData: notBreaching
    
    ContainerInstancesExcessAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Properties:
        AlarmDescription: 'Cluster is wasting container instances'
        Metrics:
        - Id: 'overcapacity'
          Label: 'overcapacity'
          Expression: 'IF((100-cpu) >= capacity, 1, 0) AND IF ((100-memory) >= capacity, 1, 0)'
          ReturnData: true
        - Id: 'capacity'
          Label: 'Percentual capacity per instance.'
          Expression: '100/instances'
          ReturnData: false
        - Id: instances
          MetricStat:
            Metric:
              Namespace: 'AWS/AutoScaling'
              MetricName: GroupDesiredCapacity
              Dimensions:
              - Name: AutoScalingGroupName
                Value: !Ref ECSAutoScalingGroup
            Stat: Minimum
            Period: 60
          ReturnData: false
        - Id: cpu
          MetricStat:
            Metric:
              Namespace: 'AWS/ECS'
              MetricName: 'CPUReservation'
              Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster
            Stat: Maximum
            Period: 60
          ReturnData: false
        - Id: memory
          MetricStat:
            Metric:
              Namespace: 'AWS/ECS'
              MetricName: 'MemoryReservation'
              Dimensions:
              - Name: ClusterName
                Value: !Ref ECSCluster
            Stat: Maximum
            Period: 60
          ReturnData: false
        ComparisonOperator: GreaterThanThreshold
        EvaluationPeriods: 5
        DatapointsToAlarm: 5
        Threshold: 0
        AlarmActions:
        - !Ref ScaleDownPolicy

########################  MONITORING - LOGS  ########################

    ECSCloudWatchParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Description: ECS
        Name: !Sub "AmazonCloudWatch-${ClusterName}-ECS"
        Type: String
        Value: !Sub |
          {
            "logs": {
              "force_flush_interval": 5,
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "${ClusterName}-/var/log/messages",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/dmesg",
                      "log_group_name": "${ClusterName}-/var/log/dmesg",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/docker",
                      "log_group_name": "${ClusterName}-/var/log/docker",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%f"
                    },
                    {
                      "file_path": "/var/log/ecs/ecs-init.log",
                      "log_group_name": "${ClusterName}-/var/log/ecs/ecs-init.log",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                    },
                    {
                      "file_path": "/var/log/ecs/ecs-agent.log",
                      "log_group_name": "${ClusterName}-/var/log/ecs/ecs-agent.log",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                    },
                    {
                      "file_path": "/var/log/ecs/audit.log",
                      "log_group_name": "${ClusterName}-/var/log/ecs/audit.log",
                      "log_stream_name": "{instance_id}",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "append_dimensions": {
                "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                "InstanceId": "${!aws:InstanceId}",
                "InstanceType": "${!aws:InstanceType}"
              },
              "metrics_collected": {
                "collectd": {
                  "metrics_aggregation_interval": 60
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "/"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                },
                "statsd": {
                  "metrics_aggregation_interval": 60,
                  "metrics_collection_interval": 10,
                  "service_address": ":8125"
                }
              }
            }
          }

########################  SQS LIFECYCLE  ########################
    AutoScalingGroupLifecycleHookQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: !Sub '${ClusterName}-lifecycle-hook'
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt 'AutoScalingGroupLifecycleHookDeadLetterQueue.Arn'
          maxReceiveCount: 5

    AutoScalingGroupLifecycleHookDeadLetterQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: !Sub '${ClusterName}-lifecycle-hook-dlq'

########################  LAMBDA - DRAIN INSTANCE  ########################    
    DrainInstanceEventSourceMapping:
      DependsOn:
      - DrainInstanceLambdaPolicy
      - DrainInstanceLogGroup
      Type: 'AWS::Lambda::EventSourceMapping'
      Properties:
        BatchSize: 1
        Enabled: true
        EventSourceArn: !GetAtt AutoScalingGroupLifecycleHookQueue.Arn
        FunctionName: !GetAtt DrainInstanceLambda.Arn
    
    DrainInstanceLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Code:
          ZipFile: |
            'use strict';
              const AWS = require('aws-sdk');
              const ecs = new AWS.ECS({apiVersion: '2014-11-13'});
              const sqs = new AWS.SQS({apiVersion: '2012-11-05'});
              const asg = new AWS.AutoScaling({apiVersion: '2011-01-01'});
              const cluster = process.env.CLUSTER;
              const queueUrl = process.env.QUEUE_URL;
              const drainingTimeout = process.env.DRAINING_TIMEOUT;
              async function getContainerInstanceArn(ec2InstanceId) {
                console.log(`getContainerInstanceArn(${[...arguments].join(', ')})`);
                const listResult = await ecs.listContainerInstances({cluster: cluster, filter: `ec2InstanceId == '${ec2InstanceId}'`}).promise();
                return listResult.containerInstanceArns[0];
              }
              async function drainInstance(ciArn) {
                console.log(`drainInstance(${[...arguments].join(', ')})`);
                await ecs.updateContainerInstancesState({cluster: cluster, containerInstances: [ciArn], status: 'DRAINING'}).promise();
              }
              async function wait(ciArn, asgName, lchName, lcaToken, terminateTime) {
                console.log(`wait(${[...arguments].join(', ')})`);
                const payload = {
                  Service: 'DrainInstance',
                  Event: 'custom:DRAIN_WAIT',
                  ContainerInstanceArn: ciArn,
                  AutoScalingGroupName: asgName,
                  LifecycleHookName: lchName,
                  LifecycleActionToken: lcaToken,
                  TerminateTime: terminateTime
                };
                await sqs.sendMessage({
                  QueueUrl: queueUrl,
                  DelaySeconds: 60,
                  MessageBody: JSON.stringify(payload)
                }).promise();
              }
              async function countTasks(ciArn) {
                console.log(`countTasks(${[...arguments].join(', ')})`);
                const listResult = await ecs.listTasks({cluster: cluster, containerInstance: ciArn}).promise();
                return listResult.taskArns.length;
              }
              async function terminateInstance(asgName, lchName, lcaToken) {
                console.log(`terminateInstance(${[...arguments].join(', ')})`);
                await asg.completeLifecycleAction({
                  AutoScalingGroupName: asgName,
                  LifecycleHookName: lchName,
                  LifecycleActionToken: lcaToken,
                  LifecycleActionResult: 'CONTINUE'
                }).promise();
              }
              async function heartbeat(asgName, lchName, lcaToken) {
                console.log(`heartbeat(${[...arguments].join(', ')})`);
                await asg.recordLifecycleActionHeartbeat({
                  AutoScalingGroupName: asgName,
                  LifecycleHookName: lchName,
                  LifecycleActionToken: lcaToken
                }).promise();
              }
              exports.handler = async function(event, context) {
                console.log(`Invoke: ${JSON.stringify(event)}`);
                const body = JSON.parse(event.Records[0].body); // batch size is 1
                if (body.Service === 'AWS Auto Scaling' && body.Event === 'autoscaling:TEST_NOTIFICATION') {
                  console.log('Ignore autoscaling:TEST_NOTIFICATION')
                } else if (body.Service === 'AWS Auto Scaling' && body.LifecycleTransition === 'autoscaling:EC2_INSTANCE_TERMINATING') {
                  const lcaToken = body.LifecycleActionToken;
                  const ciArn = await getContainerInstanceArn(body.EC2InstanceId);
                  await drainInstance(ciArn);
                  await wait(ciArn, body.AutoScalingGroupName, body.LifecycleHookName, body.LifecycleActionToken, body.Time);
                } else if (body.Service === 'DrainInstance' && body.Event === 'custom:DRAIN_WAIT') {
                  const taskCount = await countTasks(body.ContainerInstanceArn);
                  if (taskCount === 0) {
                    await terminateInstance(body.AutoScalingGroupName, body.LifecycleHookName, body.LifecycleActionToken);
                  } else {
                    const actionDuration = (Date.now() - new Date(body.TerminateTime).getTime()) / 1000;
                    if (actionDuration < drainingTimeout) {
                      await heartbeat(body.AutoScalingGroupName, body.LifecycleHookName, body.LifecycleActionToken);
                      await wait(body.ContainerInstanceArn, body.AutoScalingGroupName, body.LifecycleHookName, body.LifecycleActionToken, body.TerminateTime);
                    } else {
                      console.log('Timeout for instance termination reached.');
                      await terminateInstance(body.AutoScalingGroupName, body.LifecycleHookName, body.LifecycleActionToken);
                    }
                  }
                } else {
                  console.log('Ignore unxpected event');
                }
              };
        Handler: 'index.handler'
        MemorySize: 128
        Role: !GetAtt 'DrainInstanceLambdaRole.Arn'
        Runtime: 'nodejs12.x'
        Timeout: 30
        Environment:
          Variables:
            CLUSTER: !GetAtt  ECSCluster.Arn
            QUEUE_URL: !Ref AutoScalingGroupLifecycleHookQueue
            DRAINING_TIMEOUT: !Ref  DrainingTimeoutInSeconds
        ReservedConcurrentExecutions: 1

########################  LAMBDA - SCALE UP  ######################## 
    NotEnoughClusterCapacityRule:
      Type: 'AWS::Events::Rule'
      Properties:
        Description: 'Not enough resources to place service task. Scale up cluster.'
        EventPattern:
          source:
          - 'aws.ecs'
          'detail-type':
          - 'ECS Service Action'
          detail:
            eventType:
            - 'ERROR'
            eventName:
            - 'SERVICE_TASK_PLACEMENT_FAILURE'
            clusterArn:
            - !GetAtt ECSCluster.Arn
        State: ENABLED
        Targets:
        - Arn: !GetAtt ScaleUpLambda.Arn
          Id: lambda
        - Arn: !GetAtt EventLogGroup.Arn
          Id: loggroup
     
    ScaleUpLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !Ref ScaleUpLambda
        Principal: 'events.amazonaws.com'
        SourceArn: !GetAtt 'NotEnoughClusterCapacityRule.Arn'

    ScaleUpLambda:
      Type: 'AWS::Lambda::Function'
      Properties:
        Code:
          ZipFile: |
            'use strict';
            const AWS = require('aws-sdk');
            const autoscaling = new AWS.AutoScaling({apiVersion: '2011-01-01'});
            const sp = process.env.SCALING_POLICY_NAME;
            exports.handler = async function(event, context) {
              console.log(`Invoke: ${!JSON.stringify(event)}`);
              const res = await autoscaling.executePolicy({PolicyName: sp, HonorCooldown: false, MetricValue: -1.0, BreachThreshold: -1.0}).promise();
              console.log('Executed scaling policy', res);
            }
        Handler: 'index.handler'
        MemorySize: 128
        Role: !GetAtt 'ScaleUpLambdaRole.Arn'
        Runtime: 'nodejs12.x'
        Timeout: 60
        Environment:
          Variables:
            SCALING_POLICY_NAME: !Ref ScaleUpPolicy

Outputs:
  ClusterName:
    Description: 'ECS cluster.'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${ClusterName}'
  
  ClusterARN:
    Description: 'ECS cluster ARN'
    Value: !GetAtt  ECSCluster.Arn
    Export:
      Name: !Sub '${ClusterName}-ClusterARN'

  ScaleUpPolicy:
    Description: 'Scale Up Policy'
    Value: !Ref ScaleUpPolicy 
    Export:
      Name: !Sub '${ClusterName}-ScaleUpPolicy'

  AutoScalingGroupLifecycleHookQueueURL:
    Description: 'URL da Queue do LifeCyle'
    Value: !Ref AutoScalingGroupLifecycleHookQueue
    Export:
      Name: !Sub '${ClusterName}-AutoScalingGroupLifecycleHookQueueURL'
  
  AutoScalingGroupLifecycleHookQueueARN:
    Description: 'ARN da Queue do LifeCyle'
    Value: !GetAtt  AutoScalingGroupLifecycleHookQueue.Arn
    Export:
      Name: !Sub '${ClusterName}-AutoScalingGroupLifecycleHookQueueARN'
