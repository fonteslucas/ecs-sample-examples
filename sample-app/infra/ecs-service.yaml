Parameters:

  ECSCluster:
    Type: String
  
# VPC:
#    Description: The VPC that the ECS cluster is deployed to
#    Type: String

  LaunchTypeService:
    Type: String
    Default: EC2
  
  MicroServiceName:
    Type: String

  ContainerNetworkMode:
    Type: String

  CpuUnits:
    Type: Number
  
  MemoryReservation:
    Type: Number
  
  Memory:
    Type: Number

  ContainerPort:
    Type: String
  
  DesiredCountService:
    Type: Number

  MaxTaskCapacityASG:
    Type: String
  
  MinTaskCapacityASG:
    Type: String
  
#  Listener:
#    Description: The Application Load Balancer listener to register with
#    Type: String

#  Path:
#    Description: The path to register with the Application Load Balancer
#    Type: String

Resources:

  CWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${MicroServiceName}
      RetentionInDays: 7 
  
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:Describe*
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              Resource: "*"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - ecs-tasks.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - application-autoscaling.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: !Ref ContainerNetworkMode
      RequiresCompatibilities: 
        - EC2
      ExecutionRoleArn: !GetAtt  TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref MicroServiceName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MicroServiceName}:latest
          Cpu: !Ref CpuUnits
          MemoryReservation: !Ref MemoryReservation
          Memory: !Ref Memory
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub ${AWS::Region}
              awslogs-group: !Ref CWLogGroup
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: AWS_Region
              Value: !Sub ${AWS::Region}

  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
        Cluster: !Ref ECSCluster
#        Role: !Ref ServiceRole
        DesiredCount: !Ref DesiredCountService
        LaunchType: !Ref LaunchTypeService
        TaskDefinition: !Ref TaskDefinition
        PlacementStrategies: 
          - Type: "spread"
            Field: "attribute:ecs.availability-zone"
          - Type: "spread"
            Field: "instanceId"
        SchedulingStrategy: "REPLICA"
  
#  TargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
#      VpcId: !Ref VPC
#      Port: 80
#      Protocol: HTTP
#      Matcher:
#        HttpCode: 200-299
#      HealthCheckIntervalSeconds: 10
#      HealthCheckPath: /
#      HealthCheckProtocol: HTTP
#      HealthCheckTimeoutSeconds: 5
#      HealthyThresholdCount: 2

#  ListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      ListenerArn: !Ref Listener
#      Priority: 1
#      Conditions:
#        - Field: path-pattern
#          Values:
#            - !Ref Path
#      Actions:
#       - TargetGroupArn: !Ref TargetGroup
#          Type: forward

  ApplicationAutoScalingScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
        MaxCapacity: !Ref MaxTaskCapacityASG
        MinCapacity: !Ref MinTaskCapacityASG
        ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
        RoleARN: !GetAtt AutoscalingRole.Arn
        ScalableDimension: "ecs:service:DesiredCount"
        ServiceNamespace: "ecs"
        SuspendedState: 
            DynamicScalingInSuspended: false
            DynamicScalingOutSuspended: false
            ScheduledScalingSuspended: false

  AddTaskScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
        PolicyName: "AddTaskPolicy"
        PolicyType: "StepScaling"
        ScalingTargetId: !Ref ApplicationAutoScalingScalableTarget
        StepScalingPolicyConfiguration: 
            AdjustmentType: "ChangeInCapacity"
            Cooldown: 60
            MetricAggregationType: "Maximum"
            StepAdjustments: 
            - MetricIntervalLowerBound: 0
              ScalingAdjustment: 1

  RemoveTaskScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
        PolicyName: "RemoveTaskPolicy"
        PolicyType: "StepScaling"
        ScalingTargetId: !Ref ApplicationAutoScalingScalableTarget
        StepScalingPolicyConfiguration: 
          AdjustmentType: ChangeInCapacity
          Cooldown: 60
          MetricAggregationType: Average
          StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  RemoveTask:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions: 
        - !Ref RemoveTaskScalingPolicy
      MetricName: "ApproximateNumberOfMessagesVisible"
      Namespace: "AWS/SQS"
      Statistic: "Maximum"
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 10
      ComparisonOperator: "LessThanOrEqualToThreshold"

  AddTask:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions: 
        - !Ref AddTaskScalingPolicy
      MetricName: "ApproximateNumberOfMessagesVisible"
      Namespace: "AWS/SQS"
      Statistic: "Maximum"
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 10
      ComparisonOperator: "GreaterThanThreshold"

